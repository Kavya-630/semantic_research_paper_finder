# -*- coding: utf-8 -*-
"""app1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mc72zBeLugadl5VWbR7uMZXeBy9SWmiq
"""


# app.py
import streamlit as st
import pandas as pd
import json
from sentence_transformers import SentenceTransformer, util
import faiss

# -----------------------------
# Load Data & Models
# -----------------------------
@st.cache_resource
def load_model():
    return SentenceTransformer("all-MiniLM-L6-v2")

@st.cache_data
def load_papers(json_path=r"C:\Users\Navya sree\Downloads\arxiv-metadata-oai-snapshot.json", limit=200000):
    papers = []
    with open(json_path, "r") as f:
        for i, line in enumerate(f):
            if i >= limit:
                break
            paper = json.loads(line)
            papers.append({
                "id": paper.get("id"),
                "title": paper.get("title"),
                "abstract": paper.get("abstract"),
                "categories": paper.get("categories"),
                "year": paper.get("update_date", "")[:4]
            })
    return pd.DataFrame(papers)

@st.cache_resource
def build_index(df, model):
    embeddings = model.encode(df["title"].tolist(), show_progress_bar=True, convert_to_tensor=False)
    index = faiss.IndexFlatL2(embeddings.shape[1])
    index.add(embeddings.astype("float32"))
    return index, embeddings

# -----------------------------
# Streamlit UI
# -----------------------------
def main():
    st.set_page_config(page_title="Semantic Research Paper Finder", layout="wide")

    st.title("ðŸ“š Semantic Research Paper Finder")
    st.markdown("Search and explore academic papers by semantic meaning, not just keywords.")

    # Sidebar Filters
    st.sidebar.header("ðŸ”Ž Filters")
    max_results = st.sidebar.slider("Number of results", 5, 50, 10)
    selected_year = st.sidebar.text_input("Filter by year (e.g., 2022)", "")

    # Load resources
    model = load_model()
    df = load_papers("arxiv-metadata-oai.json")
    index, embeddings = build_index(df, model)

    # Search box
    query = st.text_input("Enter your research topic or query:")
    search_button = st.button("Search")

    if search_button and query:
        query_embedding = model.encode([query], convert_to_tensor=False)
        D, I = index.search(query_embedding.astype("float32"), max_results)

        results = df.iloc[I[0]].copy()
        results["score"] = 1 - D[0] / 2

        # Apply year filter
        if selected_year:
            results = results[results["year"] == selected_year]

        st.subheader(f"Top {len(results)} Results for: *{query}*")
        for _, row in results.iterrows():
            with st.expander(f"ðŸ“„ {row['title']} ({row['year']})"):
                st.write(f"**Categories:** {row['categories']}")
                st.write(f"**Abstract:** {row['abstract']}")
                st.progress(float(row["score"]))

if __name__ == "__main__":
    main()
